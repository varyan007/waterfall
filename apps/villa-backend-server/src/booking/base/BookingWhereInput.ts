/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AmenityWhereUniqueInput } from "../../amenity/base/AmenityWhereUniqueInput";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { ServicePackageWhereUniqueInput } from "../../servicePackage/base/ServicePackageWhereUniqueInput";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { VillaWhereUniqueInput } from "../../villa/base/VillaWhereUniqueInput";

@InputType()
class BookingWhereInput {
  @ApiProperty({
    required: false,
    type: () => AmenityWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AmenityWhereUniqueInput)
  @IsOptional()
  @Field(() => AmenityWhereUniqueInput, {
    nullable: true,
  })
  amenity?: AmenityWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dateFrom?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dateTo?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => ServicePackageWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ServicePackageWhereUniqueInput)
  @IsOptional()
  @Field(() => ServicePackageWhereUniqueInput, {
    nullable: true,
  })
  servicePackage?: ServicePackageWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  status?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  totalPrice?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => VillaWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VillaWhereUniqueInput)
  @IsOptional()
  @Field(() => VillaWhereUniqueInput, {
    nullable: true,
  })
  villa?: VillaWhereUniqueInput;
}

export { BookingWhereInput as BookingWhereInput };
