/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VillaService } from "../villa.service";
import { VillaCreateInput } from "./VillaCreateInput";
import { Villa } from "./Villa";
import { VillaFindManyArgs } from "./VillaFindManyArgs";
import { VillaWhereUniqueInput } from "./VillaWhereUniqueInput";
import { VillaUpdateInput } from "./VillaUpdateInput";
import { AmenityFindManyArgs } from "../../amenity/base/AmenityFindManyArgs";
import { Amenity } from "../../amenity/base/Amenity";
import { AmenityWhereUniqueInput } from "../../amenity/base/AmenityWhereUniqueInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";

export class VillaControllerBase {
  constructor(protected readonly service: VillaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Villa })
  async createVilla(@common.Body() data: VillaCreateInput): Promise<Villa> {
    return await this.service.createVilla({
      data: data,
      select: {
        address: true,
        areaSqrm: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Villa] })
  @ApiNestedQuery(VillaFindManyArgs)
  async villas(@common.Req() request: Request): Promise<Villa[]> {
    const args = plainToClass(VillaFindManyArgs, request.query);
    return this.service.villas({
      ...args,
      select: {
        address: true,
        areaSqrm: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Villa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async villa(
    @common.Param() params: VillaWhereUniqueInput
  ): Promise<Villa | null> {
    const result = await this.service.villa({
      where: params,
      select: {
        address: true,
        areaSqrm: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Villa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVilla(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() data: VillaUpdateInput
  ): Promise<Villa | null> {
    try {
      return await this.service.updateVilla({
        where: params,
        data: data,
        select: {
          address: true,
          areaSqrm: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Villa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVilla(
    @common.Param() params: VillaWhereUniqueInput
  ): Promise<Villa | null> {
    try {
      return await this.service.deleteVilla({
        where: params,
        select: {
          address: true,
          areaSqrm: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/amenities")
  @ApiNestedQuery(AmenityFindManyArgs)
  async findAmenities(
    @common.Req() request: Request,
    @common.Param() params: VillaWhereUniqueInput
  ): Promise<Amenity[]> {
    const query = plainToClass(AmenityFindManyArgs, request.query);
    const results = await this.service.findAmenities(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        typeField: true,
        updatedAt: true,

        villa: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/amenities")
  async connectAmenities(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: AmenityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      amenities: {
        connect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/amenities")
  async updateAmenities(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: AmenityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      amenities: {
        set: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/amenities")
  async disconnectAmenities(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: AmenityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      amenities: {
        disconnect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: VillaWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        amenity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateFrom: true,
        dateTo: true,
        id: true,

        servicePackage: {
          select: {
            id: true,
          },
        },

        status: true,
        totalPrice: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        villa: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: VillaWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        typeField: true,
        updatedAt: true,

        villa: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: VillaWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateVilla({
      where: params,
      data,
      select: { id: true },
    });
  }
}
