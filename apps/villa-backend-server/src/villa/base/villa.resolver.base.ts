/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Villa } from "./Villa";
import { VillaCountArgs } from "./VillaCountArgs";
import { VillaFindManyArgs } from "./VillaFindManyArgs";
import { VillaFindUniqueArgs } from "./VillaFindUniqueArgs";
import { CreateVillaArgs } from "./CreateVillaArgs";
import { UpdateVillaArgs } from "./UpdateVillaArgs";
import { DeleteVillaArgs } from "./DeleteVillaArgs";
import { AmenityFindManyArgs } from "../../amenity/base/AmenityFindManyArgs";
import { Amenity } from "../../amenity/base/Amenity";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { VillaService } from "../villa.service";
@graphql.Resolver(() => Villa)
export class VillaResolverBase {
  constructor(protected readonly service: VillaService) {}

  async _villasMeta(
    @graphql.Args() args: VillaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Villa])
  async villas(@graphql.Args() args: VillaFindManyArgs): Promise<Villa[]> {
    return this.service.villas(args);
  }

  @graphql.Query(() => Villa, { nullable: true })
  async villa(
    @graphql.Args() args: VillaFindUniqueArgs
  ): Promise<Villa | null> {
    const result = await this.service.villa(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Villa)
  async createVilla(@graphql.Args() args: CreateVillaArgs): Promise<Villa> {
    return await this.service.createVilla({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Villa)
  async updateVilla(
    @graphql.Args() args: UpdateVillaArgs
  ): Promise<Villa | null> {
    try {
      return await this.service.updateVilla({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Villa)
  async deleteVilla(
    @graphql.Args() args: DeleteVillaArgs
  ): Promise<Villa | null> {
    try {
      return await this.service.deleteVilla(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Amenity], { name: "amenities" })
  async findAmenities(
    @graphql.Parent() parent: Villa,
    @graphql.Args() args: AmenityFindManyArgs
  ): Promise<Amenity[]> {
    const results = await this.service.findAmenities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Villa,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Service], { name: "services" })
  async findServices(
    @graphql.Parent() parent: Villa,
    @graphql.Args() args: ServiceFindManyArgs
  ): Promise<Service[]> {
    const results = await this.service.findServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
