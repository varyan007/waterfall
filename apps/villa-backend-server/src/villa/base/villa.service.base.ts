/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Villa as PrismaVilla,
  Amenity as PrismaAmenity,
  Booking as PrismaBooking,
  Service as PrismaService,
} from "@prisma/client";

export class VillaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VillaCountArgs, "select">): Promise<number> {
    return this.prisma.villa.count(args);
  }

  async villas(args: Prisma.VillaFindManyArgs): Promise<PrismaVilla[]> {
    return this.prisma.villa.findMany(args);
  }
  async villa(args: Prisma.VillaFindUniqueArgs): Promise<PrismaVilla | null> {
    return this.prisma.villa.findUnique(args);
  }
  async createVilla(args: Prisma.VillaCreateArgs): Promise<PrismaVilla> {
    return this.prisma.villa.create(args);
  }
  async updateVilla(args: Prisma.VillaUpdateArgs): Promise<PrismaVilla> {
    return this.prisma.villa.update(args);
  }
  async deleteVilla(args: Prisma.VillaDeleteArgs): Promise<PrismaVilla> {
    return this.prisma.villa.delete(args);
  }

  async findAmenities(
    parentId: string,
    args: Prisma.AmenityFindManyArgs
  ): Promise<PrismaAmenity[]> {
    return this.prisma.villa
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .amenities(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.villa
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findServices(
    parentId: string,
    args: Prisma.ServiceFindManyArgs
  ): Promise<PrismaService[]> {
    return this.prisma.villa
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .services(args);
  }
}
