/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Amenity } from "./Amenity";
import { AmenityCountArgs } from "./AmenityCountArgs";
import { AmenityFindManyArgs } from "./AmenityFindManyArgs";
import { AmenityFindUniqueArgs } from "./AmenityFindUniqueArgs";
import { CreateAmenityArgs } from "./CreateAmenityArgs";
import { UpdateAmenityArgs } from "./UpdateAmenityArgs";
import { DeleteAmenityArgs } from "./DeleteAmenityArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { Villa } from "../../villa/base/Villa";
import { AmenityService } from "../amenity.service";
@graphql.Resolver(() => Amenity)
export class AmenityResolverBase {
  constructor(protected readonly service: AmenityService) {}

  async _amenitiesMeta(
    @graphql.Args() args: AmenityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Amenity])
  async amenities(
    @graphql.Args() args: AmenityFindManyArgs
  ): Promise<Amenity[]> {
    return this.service.amenities(args);
  }

  @graphql.Query(() => Amenity, { nullable: true })
  async amenity(
    @graphql.Args() args: AmenityFindUniqueArgs
  ): Promise<Amenity | null> {
    const result = await this.service.amenity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Amenity)
  async createAmenity(
    @graphql.Args() args: CreateAmenityArgs
  ): Promise<Amenity> {
    return await this.service.createAmenity({
      ...args,
      data: {
        ...args.data,

        villa: args.data.villa
          ? {
              connect: args.data.villa,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Amenity)
  async updateAmenity(
    @graphql.Args() args: UpdateAmenityArgs
  ): Promise<Amenity | null> {
    try {
      return await this.service.updateAmenity({
        ...args,
        data: {
          ...args.data,

          villa: args.data.villa
            ? {
                connect: args.data.villa,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Amenity)
  async deleteAmenity(
    @graphql.Args() args: DeleteAmenityArgs
  ): Promise<Amenity | null> {
    try {
      return await this.service.deleteAmenity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Amenity,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Villa, {
    nullable: true,
    name: "villa",
  })
  async getVilla(@graphql.Parent() parent: Amenity): Promise<Villa | null> {
    const result = await this.service.getVilla(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
