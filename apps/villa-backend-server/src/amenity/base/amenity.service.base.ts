/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Amenity as PrismaAmenity,
  Booking as PrismaBooking,
  Villa as PrismaVilla,
} from "@prisma/client";

export class AmenityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AmenityCountArgs, "select">): Promise<number> {
    return this.prisma.amenity.count(args);
  }

  async amenities(args: Prisma.AmenityFindManyArgs): Promise<PrismaAmenity[]> {
    return this.prisma.amenity.findMany(args);
  }
  async amenity(
    args: Prisma.AmenityFindUniqueArgs
  ): Promise<PrismaAmenity | null> {
    return this.prisma.amenity.findUnique(args);
  }
  async createAmenity(args: Prisma.AmenityCreateArgs): Promise<PrismaAmenity> {
    return this.prisma.amenity.create(args);
  }
  async updateAmenity(args: Prisma.AmenityUpdateArgs): Promise<PrismaAmenity> {
    return this.prisma.amenity.update(args);
  }
  async deleteAmenity(args: Prisma.AmenityDeleteArgs): Promise<PrismaAmenity> {
    return this.prisma.amenity.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.amenity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async getVilla(parentId: string): Promise<PrismaVilla | null> {
    return this.prisma.amenity
      .findUnique({
        where: { id: parentId },
      })
      .villa();
  }
}
