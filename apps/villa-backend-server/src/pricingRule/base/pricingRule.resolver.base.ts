/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PricingRule } from "./PricingRule";
import { PricingRuleCountArgs } from "./PricingRuleCountArgs";
import { PricingRuleFindManyArgs } from "./PricingRuleFindManyArgs";
import { PricingRuleFindUniqueArgs } from "./PricingRuleFindUniqueArgs";
import { CreatePricingRuleArgs } from "./CreatePricingRuleArgs";
import { UpdatePricingRuleArgs } from "./UpdatePricingRuleArgs";
import { DeletePricingRuleArgs } from "./DeletePricingRuleArgs";
import { ServicePackage } from "../../servicePackage/base/ServicePackage";
import { PricingRuleService } from "../pricingRule.service";
@graphql.Resolver(() => PricingRule)
export class PricingRuleResolverBase {
  constructor(protected readonly service: PricingRuleService) {}

  async _pricingRulesMeta(
    @graphql.Args() args: PricingRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PricingRule])
  async pricingRules(
    @graphql.Args() args: PricingRuleFindManyArgs
  ): Promise<PricingRule[]> {
    return this.service.pricingRules(args);
  }

  @graphql.Query(() => PricingRule, { nullable: true })
  async pricingRule(
    @graphql.Args() args: PricingRuleFindUniqueArgs
  ): Promise<PricingRule | null> {
    const result = await this.service.pricingRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PricingRule)
  async createPricingRule(
    @graphql.Args() args: CreatePricingRuleArgs
  ): Promise<PricingRule> {
    return await this.service.createPricingRule({
      ...args,
      data: {
        ...args.data,

        servicePackage: args.data.servicePackage
          ? {
              connect: args.data.servicePackage,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PricingRule)
  async updatePricingRule(
    @graphql.Args() args: UpdatePricingRuleArgs
  ): Promise<PricingRule | null> {
    try {
      return await this.service.updatePricingRule({
        ...args,
        data: {
          ...args.data,

          servicePackage: args.data.servicePackage
            ? {
                connect: args.data.servicePackage,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PricingRule)
  async deletePricingRule(
    @graphql.Args() args: DeletePricingRuleArgs
  ): Promise<PricingRule | null> {
    try {
      return await this.service.deletePricingRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => ServicePackage, {
    nullable: true,
    name: "servicePackage",
  })
  async getServicePackage(
    @graphql.Parent() parent: PricingRule
  ): Promise<ServicePackage | null> {
    const result = await this.service.getServicePackage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
