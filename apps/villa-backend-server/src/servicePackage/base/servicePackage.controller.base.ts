/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicePackageService } from "../servicePackage.service";
import { ServicePackageCreateInput } from "./ServicePackageCreateInput";
import { ServicePackage } from "./ServicePackage";
import { ServicePackageFindManyArgs } from "./ServicePackageFindManyArgs";
import { ServicePackageWhereUniqueInput } from "./ServicePackageWhereUniqueInput";
import { ServicePackageUpdateInput } from "./ServicePackageUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { PricingRuleFindManyArgs } from "../../pricingRule/base/PricingRuleFindManyArgs";
import { PricingRule } from "../../pricingRule/base/PricingRule";
import { PricingRuleWhereUniqueInput } from "../../pricingRule/base/PricingRuleWhereUniqueInput";

export class ServicePackageControllerBase {
  constructor(protected readonly service: ServicePackageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServicePackage })
  async createServicePackage(
    @common.Body() data: ServicePackageCreateInput
  ): Promise<ServicePackage> {
    return await this.service.createServicePackage({
      data: data,
      select: {
        amenities: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        price: true,
        services: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServicePackage] })
  @ApiNestedQuery(ServicePackageFindManyArgs)
  async servicePackages(
    @common.Req() request: Request
  ): Promise<ServicePackage[]> {
    const args = plainToClass(ServicePackageFindManyArgs, request.query);
    return this.service.servicePackages({
      ...args,
      select: {
        amenities: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        price: true,
        services: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServicePackage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async servicePackage(
    @common.Param() params: ServicePackageWhereUniqueInput
  ): Promise<ServicePackage | null> {
    const result = await this.service.servicePackage({
      where: params,
      select: {
        amenities: true,
        createdAt: true,
        description: true,
        id: true,
        images: true,
        name: true,
        price: true,
        services: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServicePackage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServicePackage(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() data: ServicePackageUpdateInput
  ): Promise<ServicePackage | null> {
    try {
      return await this.service.updateServicePackage({
        where: params,
        data: data,
        select: {
          amenities: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          name: true,
          price: true,
          services: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServicePackage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServicePackage(
    @common.Param() params: ServicePackageWhereUniqueInput
  ): Promise<ServicePackage | null> {
    try {
      return await this.service.deleteServicePackage({
        where: params,
        select: {
          amenities: true,
          createdAt: true,
          description: true,
          id: true,
          images: true,
          name: true,
          price: true,
          services: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: ServicePackageWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        amenity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateFrom: true,
        dateTo: true,
        id: true,

        servicePackage: {
          select: {
            id: true,
          },
        },

        status: true,
        totalPrice: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        villa: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pricingRules")
  @ApiNestedQuery(PricingRuleFindManyArgs)
  async findPricingRules(
    @common.Req() request: Request,
    @common.Param() params: ServicePackageWhereUniqueInput
  ): Promise<PricingRule[]> {
    const query = plainToClass(PricingRuleFindManyArgs, request.query);
    const results = await this.service.findPricingRules(params.id, {
      ...query,
      select: {
        createdAt: true,
        dayOfWeek: true,
        id: true,
        priceModifier: true,
        ruleName: true,
        season: true,

        servicePackage: {
          select: {
            id: true,
          },
        },

        specialEvent: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pricingRules")
  async connectPricingRules(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: PricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricingRules: {
        connect: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pricingRules")
  async updatePricingRules(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: PricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricingRules: {
        set: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pricingRules")
  async disconnectPricingRules(
    @common.Param() params: ServicePackageWhereUniqueInput,
    @common.Body() body: PricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pricingRules: {
        disconnect: body,
      },
    };
    await this.service.updateServicePackage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
