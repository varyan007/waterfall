/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServicePackage as PrismaServicePackage,
  Booking as PrismaBooking,
  PricingRule as PrismaPricingRule,
} from "@prisma/client";

export class ServicePackageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServicePackageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.servicePackage.count(args);
  }

  async servicePackages(
    args: Prisma.ServicePackageFindManyArgs
  ): Promise<PrismaServicePackage[]> {
    return this.prisma.servicePackage.findMany(args);
  }
  async servicePackage(
    args: Prisma.ServicePackageFindUniqueArgs
  ): Promise<PrismaServicePackage | null> {
    return this.prisma.servicePackage.findUnique(args);
  }
  async createServicePackage(
    args: Prisma.ServicePackageCreateArgs
  ): Promise<PrismaServicePackage> {
    return this.prisma.servicePackage.create(args);
  }
  async updateServicePackage(
    args: Prisma.ServicePackageUpdateArgs
  ): Promise<PrismaServicePackage> {
    return this.prisma.servicePackage.update(args);
  }
  async deleteServicePackage(
    args: Prisma.ServicePackageDeleteArgs
  ): Promise<PrismaServicePackage> {
    return this.prisma.servicePackage.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.servicePackage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findPricingRules(
    parentId: string,
    args: Prisma.PricingRuleFindManyArgs
  ): Promise<PrismaPricingRule[]> {
    return this.prisma.servicePackage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pricingRules(args);
  }
}
