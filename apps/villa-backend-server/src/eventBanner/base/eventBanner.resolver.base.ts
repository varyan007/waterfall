/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventBanner } from "./EventBanner";
import { EventBannerCountArgs } from "./EventBannerCountArgs";
import { EventBannerFindManyArgs } from "./EventBannerFindManyArgs";
import { EventBannerFindUniqueArgs } from "./EventBannerFindUniqueArgs";
import { CreateEventBannerArgs } from "./CreateEventBannerArgs";
import { UpdateEventBannerArgs } from "./UpdateEventBannerArgs";
import { DeleteEventBannerArgs } from "./DeleteEventBannerArgs";
import { EventBannerService } from "../eventBanner.service";
@graphql.Resolver(() => EventBanner)
export class EventBannerResolverBase {
  constructor(protected readonly service: EventBannerService) {}

  async _eventBannersMeta(
    @graphql.Args() args: EventBannerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventBanner])
  async eventBanners(
    @graphql.Args() args: EventBannerFindManyArgs
  ): Promise<EventBanner[]> {
    return this.service.eventBanners(args);
  }

  @graphql.Query(() => EventBanner, { nullable: true })
  async eventBanner(
    @graphql.Args() args: EventBannerFindUniqueArgs
  ): Promise<EventBanner | null> {
    const result = await this.service.eventBanner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventBanner)
  async createEventBanner(
    @graphql.Args() args: CreateEventBannerArgs
  ): Promise<EventBanner> {
    return await this.service.createEventBanner({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EventBanner)
  async updateEventBanner(
    @graphql.Args() args: UpdateEventBannerArgs
  ): Promise<EventBanner | null> {
    try {
      return await this.service.updateEventBanner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventBanner)
  async deleteEventBanner(
    @graphql.Args() args: DeleteEventBannerArgs
  ): Promise<EventBanner | null> {
    try {
      return await this.service.deleteEventBanner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
