/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EventBanner as PrismaEventBanner } from "@prisma/client";

export class EventBannerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventBannerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventBanner.count(args);
  }

  async eventBanners(
    args: Prisma.EventBannerFindManyArgs
  ): Promise<PrismaEventBanner[]> {
    return this.prisma.eventBanner.findMany(args);
  }
  async eventBanner(
    args: Prisma.EventBannerFindUniqueArgs
  ): Promise<PrismaEventBanner | null> {
    return this.prisma.eventBanner.findUnique(args);
  }
  async createEventBanner(
    args: Prisma.EventBannerCreateArgs
  ): Promise<PrismaEventBanner> {
    return this.prisma.eventBanner.create(args);
  }
  async updateEventBanner(
    args: Prisma.EventBannerUpdateArgs
  ): Promise<PrismaEventBanner> {
    return this.prisma.eventBanner.update(args);
  }
  async deleteEventBanner(
    args: Prisma.EventBannerDeleteArgs
  ): Promise<PrismaEventBanner> {
    return this.prisma.eventBanner.delete(args);
  }
}
