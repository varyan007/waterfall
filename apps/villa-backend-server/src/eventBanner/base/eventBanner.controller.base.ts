/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventBannerService } from "../eventBanner.service";
import { EventBannerCreateInput } from "./EventBannerCreateInput";
import { EventBanner } from "./EventBanner";
import { EventBannerFindManyArgs } from "./EventBannerFindManyArgs";
import { EventBannerWhereUniqueInput } from "./EventBannerWhereUniqueInput";
import { EventBannerUpdateInput } from "./EventBannerUpdateInput";

export class EventBannerControllerBase {
  constructor(protected readonly service: EventBannerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventBanner })
  async createEventBanner(
    @common.Body() data: EventBannerCreateInput
  ): Promise<EventBanner> {
    return await this.service.createEventBanner({
      data: data,
      select: {
        active: true,
        bannerType: true,
        content: true,
        createdAt: true,
        endDate: true,
        id: true,
        image: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventBanner] })
  @ApiNestedQuery(EventBannerFindManyArgs)
  async eventBanners(@common.Req() request: Request): Promise<EventBanner[]> {
    const args = plainToClass(EventBannerFindManyArgs, request.query);
    return this.service.eventBanners({
      ...args,
      select: {
        active: true,
        bannerType: true,
        content: true,
        createdAt: true,
        endDate: true,
        id: true,
        image: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventBanner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eventBanner(
    @common.Param() params: EventBannerWhereUniqueInput
  ): Promise<EventBanner | null> {
    const result = await this.service.eventBanner({
      where: params,
      select: {
        active: true,
        bannerType: true,
        content: true,
        createdAt: true,
        endDate: true,
        id: true,
        image: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventBanner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEventBanner(
    @common.Param() params: EventBannerWhereUniqueInput,
    @common.Body() data: EventBannerUpdateInput
  ): Promise<EventBanner | null> {
    try {
      return await this.service.updateEventBanner({
        where: params,
        data: data,
        select: {
          active: true,
          bannerType: true,
          content: true,
          createdAt: true,
          endDate: true,
          id: true,
          image: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventBanner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEventBanner(
    @common.Param() params: EventBannerWhereUniqueInput
  ): Promise<EventBanner | null> {
    try {
      return await this.service.deleteEventBanner({
        where: params,
        select: {
          active: true,
          bannerType: true,
          content: true,
          createdAt: true,
          endDate: true,
          id: true,
          image: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
