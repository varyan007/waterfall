/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LanguageContent as PrismaLanguageContent,
} from "@prisma/client";

export class LanguageContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LanguageContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.languageContent.count(args);
  }

  async languageContents(
    args: Prisma.LanguageContentFindManyArgs
  ): Promise<PrismaLanguageContent[]> {
    return this.prisma.languageContent.findMany(args);
  }
  async languageContent(
    args: Prisma.LanguageContentFindUniqueArgs
  ): Promise<PrismaLanguageContent | null> {
    return this.prisma.languageContent.findUnique(args);
  }
  async createLanguageContent(
    args: Prisma.LanguageContentCreateArgs
  ): Promise<PrismaLanguageContent> {
    return this.prisma.languageContent.create(args);
  }
  async updateLanguageContent(
    args: Prisma.LanguageContentUpdateArgs
  ): Promise<PrismaLanguageContent> {
    return this.prisma.languageContent.update(args);
  }
  async deleteLanguageContent(
    args: Prisma.LanguageContentDeleteArgs
  ): Promise<PrismaLanguageContent> {
    return this.prisma.languageContent.delete(args);
  }
}
