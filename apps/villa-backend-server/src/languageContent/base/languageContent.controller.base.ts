/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LanguageContentService } from "../languageContent.service";
import { LanguageContentCreateInput } from "./LanguageContentCreateInput";
import { LanguageContent } from "./LanguageContent";
import { LanguageContentFindManyArgs } from "./LanguageContentFindManyArgs";
import { LanguageContentWhereUniqueInput } from "./LanguageContentWhereUniqueInput";
import { LanguageContentUpdateInput } from "./LanguageContentUpdateInput";

export class LanguageContentControllerBase {
  constructor(protected readonly service: LanguageContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LanguageContent })
  async createLanguageContent(
    @common.Body() data: LanguageContentCreateInput
  ): Promise<LanguageContent> {
    return await this.service.createLanguageContent({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        key: true,
        language: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LanguageContent] })
  @ApiNestedQuery(LanguageContentFindManyArgs)
  async languageContents(
    @common.Req() request: Request
  ): Promise<LanguageContent[]> {
    const args = plainToClass(LanguageContentFindManyArgs, request.query);
    return this.service.languageContents({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        key: true,
        language: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LanguageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async languageContent(
    @common.Param() params: LanguageContentWhereUniqueInput
  ): Promise<LanguageContent | null> {
    const result = await this.service.languageContent({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        key: true,
        language: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LanguageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLanguageContent(
    @common.Param() params: LanguageContentWhereUniqueInput,
    @common.Body() data: LanguageContentUpdateInput
  ): Promise<LanguageContent | null> {
    try {
      return await this.service.updateLanguageContent({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          key: true,
          language: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LanguageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLanguageContent(
    @common.Param() params: LanguageContentWhereUniqueInput
  ): Promise<LanguageContent | null> {
    try {
      return await this.service.deleteLanguageContent({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          key: true,
          language: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
